
function call_api(endpoint, method, data={}, callback=null_callback) {
    const xhr = new XMLHttpRequest();
    xhr.open(method, endpoint, true);
    xhr.getResponseHeader("Content-type", "application/json");
    data=JSON.stringify(data)
    if (method.toLowerCase() == "post" || method.toLowerCase() == "put")
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

    xhr.send(data)

    xhr.onload = function() {
        console.log(this.responseText)
        try {
            data = JSON.parse(this.responseText);
            a = data
            if (data.error != undefined)
            {
                alert(data.error);
            }
        } catch(error) {}

        callback(this.responseText);
    }
}
a = 0
function null_callback(response_text) {
}

function restart_callback(response_text) {
    location.reload();
}

function show_dialog_callback(response_text) {
    show_shadow();
    document.getElementById("dialog").style.display = "block";
    document.getElementById("dialog").innerHTML = response_text;
    document.getElementById("dialog").scrollIntoView();
}

function dialog_add_source() {
    call_api("site/add_source", "GET", "", show_dialog_callback);
}

function dialog_update_source(source_name) {
    call_api("site/edit_source/" + source_name, "GET", "", show_dialog_callback);
}

function dialog_update_source_equalizer(source_name) {
    call_api("site/edit_source/" + source_name + "/equalizer", "GET", "", show_dialog_callback);
}

function dialog_add_sink() {
    call_api("site/add_sink", "GET", "", show_dialog_callback);
}

function dialog_update_sink(sink_name) {
    call_api("site/edit_sink/" + sink_name, "GET", "", show_dialog_callback);
}

function dialog_update_sink_equalizer(sink_name) {
    call_api("site/edit_sink/" + sink_name + "/equalizer", "GET", "", show_dialog_callback);
}

function dialog_add_route() {
    call_api("site/add_route", "GET", "", show_dialog_callback);
}

function dialog_update_route(route_name) {
    call_api("site/edit_route/" + route_name, "GET", "", show_dialog_callback);
}

function dialog_update_route_equalizer(route_name) {
    call_api("site/edit_route/" + route_name + "/equalizer", "GET", "", show_dialog_callback);
}

function dialog_cancel() {
    document.getElementById("dialog").style.display = "none";
    dismiss_shadow();
}

function dialog_equalizer_default() {
    var inputs = document.querySelectorAll("DIV#dialog INPUT[TYPE='range']");
    for (index in inputs)
        inputs[index].value = 100;
}

function dialog_submit(close) {
    dismiss_shadow()
    var result = {};
    var inputs_and_selects = document.querySelectorAll("DIV#dialog INPUT, DIV#dialog SELECT");
    var url = "";
    var action = "";
    var equalizer = {};
    for (index in inputs_and_selects) {
        entry = inputs_and_selects[index];
        if (entry.id == undefined) {
            continue;
        }
        if (entry.id == "dialog_url") {
            url = entry.value;
        }
        else if (entry.id == "dialog_action") {
            action = entry.value;
        }
        else if (entry.id.startsWith("eq_b")) {
            equalizer[entry.name] = parseFloat(entry.value / 100);
        }
        else {
            if (parseInt(entry.value).toString() == entry.value) {
                result[entry.id] = parseInt(entry.value);
            }
            else {
                result[entry.id] = entry.value;
            }
        }
    }
    console.log(equalizer);
    if (Object.keys(equalizer).length > 0) {
        result["equalizer"] = equalizer;
    }
    if (close) {
        call_api(url, action, result, restart_callback);
    } else {
        call_api(url, action, result);
    }
}

function dialog_submit_close() {
    dialog_submit(true);
}

function dialog_submit_noclose() {
    dialog_submit(false);
}

function add_source_button() {
    dialog_add_source();
}

function add_sink_button() {
    dialog_add_sink();
}

function add_route_button() {
    dialog_add_route();
}

var selected_sink = "";
function sink_volume_change() {
    var volume_element = document.getElementById("sink_volume");
    var volume_level = volume_element.value / 100;
    selected_sink.dataset["volume"] = volume_level;
    call_api("/sinks/" + selected_sink.dataset["name"] + "/volume/" + volume_level, "get");
}

var selected_source = "";
function source_volume_change() {
    var volume_element = document.getElementById("source_volume");
    var volume_level = volume_element.value / 100;
    selected_source.dataset["volume"] = volume_level;
    call_api("/sources/" + selected_source.dataset["name"] + "/volume/" + volume_level, "get");
}

var selected_route = "";
function route_volume_change() {
    var volume_element = document.getElementById("route_volume");
    var volume_level = volume_element.value / 100;
    selected_route.dataset["volume"] = volume_level;
    call_api("/routes/" + selected_route.dataset["name"] + "/volume/" + volume_level, "get");
}

window.addEventListener("load", (event) => {
});

audio = {};
audio_playing = false;

function listen_to_sink_button(option) {
    if (audio_playing)
    {
        stop_audio();
    } else {
        console.log(option)
        if (option.dataset["is_group"] != "True")
        {
            start_audio(option.dataset["ip"]);
        }
        else
            alert("Can't listen to group, must listen to sink endpoint");
    }
}

function start_audio(sink_ip) {
    audiotag = document.getElementById("audio")
    audiotag.pause();
    audiotag.src = "";
    audiotag.src = 'http://192.168.3.114:8080/stream/' + sink_ip + '/';
    audiotag.play();
    audiotag.style.display = "inline";
    audio_playing = true;
}

function stop_audio() {
    audiotag = document.getElementById("audio")
    audiotag.pause();
    audiotag.style.display = "none";
    audio_playing = false;
}

function show_shadow() {
    shadow = document.getElementById("shadow");
    shadow.style.display = "block";
}

function dismiss_shadow() {
    shadow = document.getElementById("shadow");
    shadow.style.display = "none";
}

function option_onclick(e) {
    console.log("option_onclick");
    var node = e.target;
    console.log(node);
    console.log(node.dataset["volume"]);
    if (node.dataset["type"] == "SourceDescription")
    {
        selected_source = node;
        var volume_element = document.getElementById("source_volume");
        volume_element.value = parseFloat(selected_source.dataset["volume"]) * 100
        volume_element.disabled = false;
    }   
    else if (node.dataset["type"] == "SinkDescription")
    {
        selected_sink = node;
        var volume_element = document.getElementById("sink_volume");
        volume_element.value = parseFloat(selected_sink.dataset["volume"]) * 100
        volume_element.disabled = false;
    }
    else if (node.dataset["type"] == "RouteDescription")
    {
        selected_route = node;
        var volume_element = document.getElementById("route_volume");
        volume_element.value = parseFloat(selected_route.dataset["volume"]) * 100
        volume_element.disabled = false;
    }
}

function enable_disable_source_button() {
    selected_sources = get_selected_sources();
    if (selected_sources.length != 1) {
        alert("Exactly one source must be selected to edit");
    }
    var enable_disable = "/enable";
    var classname = selected_sources[0];
    if (classname.indexOf("enabled") >= 0)
    var enable_disable = "/disable";
    call_api("/sources/" + selected_sources[0].dataset["name"] + enable_disable, "get", 0, restart_callback)   
}

function equalizer_icon_onclick(e) {
    var parent_node = e.target.parentNode;
    if (parent_node.dataset["type"] == "SourceDescription")
        dialog_update_source_equalizer(parent_node.dataset["name"])
    else if (parent_node.dataset["type"] == "SinkDescription")
        dialog_update_sink_equalizer(parent_node.dataset["name"])
    else if (parent_node.dataset["type"] == "RouteDescription")
        dialog_update_route_equalizer(parent_node.dataset["name"])
}

function update_icon_onclick(e) {
    var parent_node = e.target.parentNode;
    if (parent_node.dataset["type"] == "SourceDescription")
        dialog_update_source(parent_node.dataset["name"])
    else if (parent_node.dataset["type"] == "SinkDescription")
        dialog_update_sink(parent_node.dataset["name"])
    else if (parent_node.dataset["type"] == "RouteDescription")
        dialog_update_route(parent_node.dataset["name"])
}

function volume_icon_onclick(e) {
    var parent_node = e.target.parentNode;
    var endpoint = "";
    var enabledisable = "";
    if (parent_node.dataset["type"] == "SourceDescription")
    {
        endpoint = "/sources/";
        if (parent_node.dataset["enabled"] == "True")
            enabledisable = "/disable";
        else
            enabledisable = "/enable";
    }
    else if (parent_node.dataset["type"] == "SinkDescription")
    {
        endpoint = "/sinks/";
        if (parent_node.dataset["enabled"] == "True")
            enabledisable = "/disable";
        else
            enabledisable = "/enable";
    }
    else if (parent_node.dataset["type"] == "RouteDescription")
    {
        endpoint = "/routes/";
        if (parent_node.dataset["enabled"] == "True")
            enabledisable = "/disable";
        else
            enabledisable = "/enable";
    }
            
    call_api(endpoint + parent_node.dataset["name"] + enabledisable, "get", 0, restart_callback)
}

function remove_icon_onclick(e) {
    var parent_node = e.target.parentNode;
    var endpoint = "";
    var type = "";
    if (parent_node.dataset["type"] == "SourceDescription")
    {
        endpoint = "/sources/";
        type = "source";
    }
    else if (parent_node.dataset["type"] == "SinkDescription")
    {
        endpoint = "/sinks/";
        type = "sink";
    }
    else if (parent_node.dataset["type"] == "RouteDescription")
    {
        endpoint = "/routes/";
        type = "route";
    }
            
    var do_it = confirm("Are you sure you want to remove the " + type + " '" + parent_node.dataset["name"] + "'?");
    if (do_it) {
        call_api(endpoint + parent_node.dataset["name"], "delete", 0, restart_callback)
    }
}

function listen_icon_onclick(e) {
    listen_to_sink_button(e.target.parentNode);
}
