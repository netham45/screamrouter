/**
 * @file audio_engine_config_types.h
 * @brief Defines data structures for configuring the audio engine state.
 * @details This file contains the C++ structures that represent the desired state of the
 *          audio engine, including parameters for source-to-sink paths and sink configurations.
 *          It also includes the pybind11 bindings to expose these types to Python.
 */
#ifndef AUDIO_ENGINE_CONFIG_TYPES_H
#define AUDIO_ENGINE_CONFIG_TYPES_H

#include <string>
#include <vector>
#include <map>
#include <set>
#include "audio_constants.h"
#include "audio_types.h"
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace screamrouter {
namespace config {

/**
 * @struct RtpReceiverConfig
 * @brief Configuration for a single RTP receiver in multi-device mode.
 * @details Holds the resolved details for a single receiver including IP, port, and channel mapping.
 */
struct RtpReceiverConfig {
    /** @brief Unique identifier for this receiver. */
    std::string receiver_id;
    /** @brief IP address of the receiver. */
    std::string ip_address;
    /** @brief Port number for the receiver. */
    uint16_t port;
    /** @brief Channel mapping: [left_channel, right_channel] indices 0-7. */
    uint8_t channel_map[2];
    /** @brief Whether this receiver is enabled. */
    bool enabled;
};

/**
 * @struct AppliedSourcePathParams
 * @brief Defines the parameters for a single audio path from a source to a sink.
 * @details This structure holds all configuration details for a specific processing
 *          path, including routing information, volume, EQ, delay, and speaker layout settings.
 */
struct AppliedSourcePathParams {
    /** @brief A unique identifier for this path, e.g., "DesktopAudio_to_LivingRoomSpeakers". */
    std::string path_id;
    /** @brief The tag of the original audio source, e.g., "192.168.1.100". */
    std::string source_tag;
    /** @brief The ID of the sink this path is routed to. */
    std::string target_sink_id;
    
    /** @brief The volume level for this path (1.0 is nominal). */
    float volume = 1.0f;
    /** @brief A vector of gain values for each EQ band. */
    std::vector<float> eq_values;
    /** @brief Flag to enable/disable EQ normalization. */
    bool eq_normalization = true;
    /** @brief Flag to enable/disable volume normalization. */
    bool volume_normalization = false;
    /** @brief Audio delay in milliseconds. */
    int delay_ms = 0;
    /** @brief Timeshift delay in seconds for synchronizing streams. */
    float timeshift_sec = 0.0f;
    
    /** @brief The number of output channels required by the target sink. */
    int target_output_channels;
    /** @brief The sample rate required by the target sink. */
    int target_output_samplerate;
    
    /** @brief A unique ID for the processor instance, generated by the C++ backend. */
    std::string generated_instance_id;

    /** @brief A map from input channel count to a specific speaker layout configuration. */
    std::map<int, screamrouter::audio::CppSpeakerLayout> speaker_layouts_map;

    /**
     * @brief Default constructor. Initializes EQ values to be flat.
     */
    AppliedSourcePathParams() : volume(1.0f), delay_ms(0), timeshift_sec(0.0f),
                                target_output_channels(2), target_output_samplerate(48000) {
      eq_values.assign(screamrouter::audio::EQ_BANDS, 1.0f); // Default flat EQ
  }
};

/**
 * @struct AppliedSinkParams
 * @brief Defines the parameters for a configured audio sink (output).
 */
struct AppliedSinkParams {
    /** @brief A unique identifier for this sink. */
    std::string sink_id;
    /** @brief The core engine configuration for this sink. */
    screamrouter::audio::SinkConfig sink_engine_config;
    /** @brief A list of source path IDs that are connected to this sink. */
    std::vector<std::string> connected_source_path_ids;
};

/**
 * @struct DesiredEngineState
 * @brief Represents the complete desired configuration of the audio engine.
 * @details This structure is the top-level object passed from Python to C++ to define
 *          the entire audio routing and processing setup.
 */
struct DesiredEngineState {
    /** @brief A list of all desired source-to-sink paths. */
    std::vector<AppliedSourcePathParams> source_paths;
    /** @brief A list of all desired sinks. */
    std::vector<AppliedSinkParams> sinks;
};
    
/**
 * @brief Binds the configuration data structures to a Python module.
 * @param m The pybind11 module to which the types will be bound.
 */
inline void bind_config_types(pybind11::module_ &m) {
    namespace py = pybind11;

    py::class_<RtpReceiverConfig>(m, "RtpReceiverConfig", "Configuration for a single RTP receiver in multi-device mode")
        .def(py::init<>())
        .def_readwrite("receiver_id", &RtpReceiverConfig::receiver_id, "Unique identifier for this receiver")
        .def_readwrite("ip_address", &RtpReceiverConfig::ip_address, "IP address of the receiver")
        .def_readwrite("port", &RtpReceiverConfig::port, "Port number for the receiver")
        .def_property("channel_map",
            [](const RtpReceiverConfig& self) {
                return py::make_tuple(self.channel_map[0], self.channel_map[1]);
            },
            [](RtpReceiverConfig& self, py::tuple t) {
                if (t.size() != 2) throw std::runtime_error("channel_map must be a tuple of 2 elements");
                self.channel_map[0] = t[0].cast<uint8_t>();
                self.channel_map[1] = t[1].cast<uint8_t>();
            },
            "Channel mapping: (left_channel, right_channel) indices 0-7")
        .def_readwrite("enabled", &RtpReceiverConfig::enabled, "Whether this receiver is enabled");

    py::class_<AppliedSourcePathParams>(m, "AppliedSourcePathParams", "Parameters for a specific source-to-sink audio path")
        .def(py::init<>())
        .def_readwrite("path_id", &AppliedSourcePathParams::path_id, "Unique ID for this path (e.g., source_tag_to_sink_id)")
        .def_readwrite("source_tag", &AppliedSourcePathParams::source_tag, "Original source identifier (e.g., IP address)")
        .def_readwrite("target_sink_id", &AppliedSourcePathParams::target_sink_id, "ID of the target sink for this path")
        .def_readwrite("volume", &AppliedSourcePathParams::volume, "Volume for this path")
        .def_readwrite("eq_values", &AppliedSourcePathParams::eq_values, "Equalizer settings for this path (list/vector of floats)")
        .def_readwrite("eq_normalization", &AppliedSourcePathParams::eq_normalization, "Enable or disable equalizer normalization")
        .def_readwrite("volume_normalization", &AppliedSourcePathParams::volume_normalization, "Enable or disable volume normalization")
        .def_readwrite("delay_ms", &AppliedSourcePathParams::delay_ms, "Delay in milliseconds for this path")
        .def_readwrite("timeshift_sec", &AppliedSourcePathParams::timeshift_sec, "Timeshift in seconds for this path")
        .def_readwrite("target_output_channels", &AppliedSourcePathParams::target_output_channels, "Required output channels for the target sink")
        .def_readwrite("target_output_samplerate", &AppliedSourcePathParams::target_output_samplerate, "Required output sample rate for the target sink")
        .def_readwrite("generated_instance_id", &AppliedSourcePathParams::generated_instance_id, "(Read-only from Python perspective) Instance ID generated by C++")
        .def_readwrite("speaker_layouts_map", &AppliedSourcePathParams::speaker_layouts_map, "Map of input channel counts to CppSpeakerLayout objects");

    py::class_<AppliedSinkParams>(m, "AppliedSinkParams", "Parameters for a configured sink")
        .def(py::init<>())
        .def_readwrite("sink_id", &AppliedSinkParams::sink_id, "Unique identifier for the sink")
        .def_readwrite("sink_engine_config", &AppliedSinkParams::sink_engine_config, "C++ SinkConfig parameters for AudioManager")
        .def_readwrite("connected_source_path_ids", &AppliedSinkParams::connected_source_path_ids, "List of path_ids connected to this sink");

    py::class_<DesiredEngineState>(m, "DesiredEngineState", "Represents the complete desired state of the audio engine")
        .def(py::init<>())
        .def_readwrite("source_paths", &DesiredEngineState::source_paths, "List of all desired AppliedSourcePathParams")
        .def_readwrite("sinks", &DesiredEngineState::sinks, "List of all desired AppliedSinkParams");
}

} // namespace config
} // namespace screamrouter

#endif // AUDIO_ENGINE_CONFIG_TYPES_H
