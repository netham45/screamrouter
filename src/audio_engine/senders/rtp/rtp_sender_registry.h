/**
 * @file rtp_sender_registry.h
 * @brief Defines the RtpSenderRegistry class for tracking local SSRC values.
 * @details This file contains the definition of a singleton class used to maintain a
 *          global registry of SSRC values generated by local RTP senders. This is
 *          used to prevent RTP feedback loops.
 */
#ifndef RTP_SENDER_REGISTRY_H
#define RTP_SENDER_REGISTRY_H

#include <cstdint>
#include <mutex>
#include <set>

namespace screamrouter {
namespace audio {

/**
 * @class RtpSenderRegistry
 * @brief A singleton registry for tracking SSRC values of local RTP senders.
 * @details This class provides a thread-safe, global point of access to a set of
 *          SSRCs that are currently in use by `RtpSender` instances. This allows
 *          the `RtpReceiver` to identify and ignore packets that are looping back
 *          from a remote endpoint.
 */
class RtpSenderRegistry {
public:
    /**
     * @brief Gets the singleton instance of the registry.
     * @return A reference to the `RtpSenderRegistry` instance.
     */
    static RtpSenderRegistry& get_instance();

    /**
     * @brief Adds an SSRC to the registry.
     * @param ssrc The SSRC to add.
     */
    void add_ssrc(uint32_t ssrc);
    /**
     * @brief Removes an SSRC from the registry.
     * @param ssrc The SSRC to remove.
     */
    void remove_ssrc(uint32_t ssrc);
    /**
     * @brief Checks if an SSRC belongs to a local sender.
     * @param ssrc The SSRC to check.
     * @return true if the SSRC is in the registry, false otherwise.
     */
    bool is_local_ssrc(uint32_t ssrc);

private:
    RtpSenderRegistry();
    ~RtpSenderRegistry();
    RtpSenderRegistry(const RtpSenderRegistry&) = delete;
    RtpSenderRegistry& operator=(const RtpSenderRegistry&) = delete;

    std::mutex mutex_;
    std::set<uint32_t> local_ssrcs_;
};

} // namespace audio
} // namespace screamrouter

#endif // RTP_SENDER_REGISTRY_H