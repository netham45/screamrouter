name: Build RPM Package
permissions:
  contents: read
  pull-requests: read

on:
  workflow_call:
    outputs:
      rpm_path:
        description: "Path to the built .rpm file"
        value: ${{ jobs.build-rpm-package.outputs.rpm_path }}
      version:
        description: "Version of the built package"
        value: ${{ jobs.build-rpm-package.outputs.version }}
  workflow_dispatch:

jobs:
  build-rpm-package:
    runs-on: ubuntu-latest
    container:
      image: almalinux:9
    outputs:
      rpm_path: ${{ steps.save_path.outputs.rpm_path }}
      version: ${{ env.VERSION }}

    steps:
      - name: Bootstrap build environment
        run: |
          set -euxo pipefail
          dnf -y install epel-release dnf-plugins-core
          dnf config-manager --set-enabled crb
          dnf -y install \
            git gcc gcc-c++ make \
            rpmdevtools rpmlint \
            lame-devel \
            python3-devel python3-pip python3-setuptools python3-virtualenv \
            autoconf automake libtool cmake \
            openssl openssl-devel \
            perl \
            curl \
            pkgconfig

      - name: Install Node.js 20
        run: |
          set -euxo pipefail
          curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
          dnf -y install nodejs
          node --version
          npm --version

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Remove Windows bins in r8brain
        run: |
          find . -type f -name '*.dll' -delete
          find . -type f -name '*.exe' -delete
          find . -type f -name '*.lib' -delete

      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/screamrouter/screamrouter

      - name: Get commit short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set version from tag or commit
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="0.0.0.$(echo ${{ env.SHORT_SHA }})"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Update spec file version
        run: |
          sed -i "s/Version:\s*1.0.0/Version:        ${{ env.VERSION }}/" rpm/screamrouter.spec

      - name: Setup RPM build tree
        run: rpmdev-setuptree

      - name: Create source tarball
        run: |
          set -euxo pipefail
          SRC_DIR="/tmp/screamrouter-${{ env.VERSION }}"
          rm -rf "$SRC_DIR"
          mkdir -p "$SRC_DIR"
          # Copy repo contents (exclude .git to keep tar clean)
          rsync -a --exclude '.git' ./ "$SRC_DIR"/
          tar -C /tmp -czf ~/rpmbuild/SOURCES/screamrouter-${{ env.VERSION }}.tar.gz "screamrouter-${{ env.VERSION }}"

      # Optional: assert system OpenSSL is visible to CMake (fallback if vendored fails)
      - name: Print OpenSSL pkg-config (diagnostics)
        run: |
          set -euxo pipefail
          pkg-config --modversion openssl || true
          pkg-config --cflags --libs openssl || true
          openssl version || true

      - name: Build RPM package
        run: |
          set -euxo pipefail
          # The site/deps are built inside the spec %build section
          rpmbuild -ba rpm/screamrouter.spec
          mkdir -p /github/workspace/artifacts
          cp ~/rpmbuild/RPMS/x86_64/screamrouter-*.rpm /github/workspace/artifacts/ \
            || cp ~/rpmbuild/RPMS/noarch/screamrouter-*.rpm /github/workspace/artifacts/

      - name: Debug RPM build failure
        if: failure()
        run: |
          echo "RPM build failed. Dumping logs..."
          find ~/rpmbuild -type f -name "*.log" -print -exec sed -n '1,200p' {} \; -exec tail -n +201 {} \;

      - name: Save artifact path
        id: save_path
        run: |
          RPM_PATH=$(ls /github/workspace/artifacts/screamrouter-*.rpm 2>/dev/null || echo "")
          if [ -n "$RPM_PATH" ]; then
            echo "rpm_path=${RPM_PATH}" >> $GITHUB_OUTPUT
          else
            echo "Failed to find RPM artifact" >&2
            exit 1
          fi

      - name: Upload RPM package artifact
        uses: actions/upload-artifact@v4
        with:
          name: screamrouter-rpm
          path: /github/workspace/artifacts/screamrouter-*.rpm
          retention-days: 1
