name: Build Python Wheels

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-linux-x86_64:
    name: Build Linux x86_64 Wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
        manylinux-image: ['manylinux_2_28_x86_64']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Build wheel in manylinux container
        run: |
          # Map Python version to manylinux Python binary
          case "${{ matrix.python-version }}" in
            "3.10") PYBIN="/opt/python/cp310-cp310/bin" ;;
            "3.11") PYBIN="/opt/python/cp311-cp311/bin" ;;
            "3.12") PYBIN="/opt/python/cp312-cp312/bin" ;;
            "3.13") PYBIN="/opt/python/cp313-cp313/bin" ;;
            "3.14") PYBIN="/opt/python/cp314-cp314/bin" ;;
          esac
          
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PYBIN="${PYBIN}" \
            quay.io/pypa/${{ matrix.manylinux-image }} \
            bash -c "
              set -e
              
              # Install Node.js
              curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
              yum install -y nodejs
              
              # Install system dependencies including perl for OpenSSL
              yum install -y wget curl perl perl-IPC-Cmd alsa-lib alsa-lib-devel clang llvm
              
              # Use the Python from manylinux
              \${PYBIN}/python -m pip install --upgrade pip
              \${PYBIN}/pip install pybind11 PyYAML wheel setuptools auditwheel
              
              # Build the wheel
              \${PYBIN}/python setup.py bdist_wheel
              
              # Repair the wheel to make it manylinux compatible
              for whl in dist/*linux_x86_64.whl; do
                if [ -f \"\$whl\" ]; then
                  auditwheel repair \"\$whl\" -w dist/
                  rm -f \"\$whl\"
                fi
              done
              
              # List the repaired wheels
              echo 'Repaired wheels:'
              ls -lh dist/
            "
      
      - name: Set up Python ${{ matrix.python-version }} for testing
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Test wheel installation
        run: |
          python -m pip install dist/*.whl
          python -c "import screamrouter; print('ScreamRouter version:', getattr(screamrouter, '__version__', 'unknown'))"
      
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 7

  build-linux-arm64:
    name: Build Linux ARM64 Wheels
    runs-on: [self-hosted, linux, arm64]
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
        manylinux-image: ['manylinux_2_28_aarch64']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Build wheel in manylinux ARM64 container
        run: |
          # Map Python version to manylinux Python binary
          case "${{ matrix.python-version }}" in
            "3.10") PYBIN="/opt/python/cp310-cp310/bin" ;;
            "3.11") PYBIN="/opt/python/cp311-cp311/bin" ;;
            "3.12") PYBIN="/opt/python/cp312-cp312/bin" ;;
            "3.13") PYBIN="/opt/python/cp313-cp313/bin" ;;
            "3.14") PYBIN="/opt/python/cp314-cp314/bin" ;;
          esac
          
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PYBIN="${PYBIN}" \
            quay.io/pypa/${{ matrix.manylinux-image }} \
            bash -c "
              set -e
              
              # Install Node.js
              curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
              yum install -y nodejs
              
              # Install system dependencies including perl for OpenSSL
              yum install -y wget curl perl perl-IPC-Cmd alsa-lib alsa-lib-devel clang llvm
              
              # Use the Python from manylinux
              \${PYBIN}/python -m pip install --upgrade pip
              \${PYBIN}/pip install pybind11 PyYAML wheel setuptools auditwheel
              
              # Build the wheel
              \${PYBIN}/python setup.py bdist_wheel
              
              # Repair the wheel to make it manylinux compatible
              for whl in dist/*linux_aarch64.whl; do
                if [ -f \"\$whl\" ]; then
                  auditwheel repair \"\$whl\" -w dist/
                  rm -f \"\$whl\"
                fi
              done
              
              # List the repaired wheels
              echo 'Repaired wheels:'
              ls -lh dist/
            "
      
      - name: Test wheel installation
        run: |
          python${{ matrix.python-version }} -m pip install dist/*.whl
          python${{ matrix.python-version }} -c "import screamrouter; print('ScreamRouter version:', getattr(screamrouter, '__version__', 'unknown'))"
      
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-arm64-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 7

  build-linux-x86_64-musl:
    name: Build Linux x86_64 MUSL Wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
        musllinux-image: ['musllinux_1_2_x86_64']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build wheel in musllinux container
        run: |
          # Map Python version to musllinux Python binary
          case "${{ matrix.python-version }}" in
            "3.10") PYBIN="/opt/python/cp310-cp310/bin" ;;
            "3.11") PYBIN="/opt/python/cp311-cp311/bin" ;;
            "3.12") PYBIN="/opt/python/cp312-cp312/bin" ;;
            "3.13") PYBIN="/opt/python/cp313-cp313/bin" ;;
            "3.14") PYBIN="/opt/python/cp314-cp314/bin" ;;
          esac

          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PYBIN="${PYBIN}" \
            quay.io/pypa/${{ matrix.musllinux-image }} \
            sh -c "
              set -e

              # Install Node.js for Alpine/MUSL
              apk add --no-cache nodejs npm

              # Install system dependencies including perl for OpenSSL
              apk add --no-cache wget curl perl cmake make g++ linux-headers alsa-lib alsa-lib-dev clang llvm

              # Use the Python from musllinux
              \${PYBIN}/python -m pip install --upgrade pip
              \${PYBIN}/pip install pybind11 PyYAML wheel setuptools auditwheel

              # Build the wheel
              \${PYBIN}/python setup.py bdist_wheel

              # Repair the wheel to make it musllinux compatible
              for whl in dist/*linux_x86_64.whl; do
                if [ -f \"\$whl\" ]; then
                  auditwheel repair \"\$whl\" -w dist/
                  rm -f \"\$whl\"
                fi
              done

              # List the repaired wheels
              echo 'Repaired wheels:'
              ls -lh dist/
            "

      - name: Test wheel installation in MUSL container
        run: |
          # Map Python version to musllinux Python binary
          case "${{ matrix.python-version }}" in
            "3.10") PYBIN="/opt/python/cp310-cp310/bin" ;;
            "3.11") PYBIN="/opt/python/cp311-cp311/bin" ;;
            "3.12") PYBIN="/opt/python/cp312-cp312/bin" ;;
            "3.13") PYBIN="/opt/python/cp313-cp313/bin" ;;
            "3.14") PYBIN="/opt/python/cp314-cp314/bin" ;;
          esac
          
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PYBIN="${PYBIN}" \
            quay.io/pypa/${{ matrix.musllinux-image }} \
            sh -c "
              \${PYBIN}/pip install dist/*.whl
              \${PYBIN}/python -c 'import screamrouter; print(\"ScreamRouter version:\", getattr(screamrouter, \"__version__\", \"unknown\"))'
            "

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64-musl-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 7

  build-linux-arm64-musl:
    name: Build Linux ARM64 MUSL Wheels
    runs-on: [self-hosted, linux, arm64]
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
        musllinux-image: ['musllinux_1_2_aarch64']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build wheel in musllinux ARM64 container
        run: |
          # Map Python version to musllinux Python binary
          case "${{ matrix.python-version }}" in
            "3.10") PYBIN="/opt/python/cp310-cp310/bin" ;;
            "3.11") PYBIN="/opt/python/cp311-cp311/bin" ;;
            "3.12") PYBIN="/opt/python/cp312-cp312/bin" ;;
            "3.13") PYBIN="/opt/python/cp313-cp313/bin" ;;
            "3.14") PYBIN="/opt/python/cp314-cp314/bin" ;;
          esac

          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PYBIN="${PYBIN}" \
            quay.io/pypa/${{ matrix.musllinux-image }} \
            sh -c "
              set -e

              # Install Node.js for Alpine/MUSL
              apk add --no-cache nodejs npm

              # Install system dependencies including perl for OpenSSL
              apk add --no-cache py3-netifaces wget curl perl cmake make g++ linux-headers alsa-lib alsa-lib-dev clang llvm

              # Use the Python from musllinux
              \${PYBIN}/python -m pip install --upgrade pip
              \${PYBIN}/pip install pybind11 PyYAML wheel setuptools auditwheel

              # Build the wheel
              \${PYBIN}/python setup.py bdist_wheel

              # Repair the wheel to make it musllinux compatible
              for whl in dist/*linux_aarch64.whl; do
                if [ -f \"\$whl\" ]; then
                  auditwheel repair \"\$whl\" -w dist/
                  rm -f \"\$whl\"
                fi
              done

              # List the repaired wheels
              echo 'Repaired wheels:'
              ls -lh dist/
            "

      - name: Test wheel installation in MUSL container
        run: |
          # Map Python version to musllinux Python binary
          case "${{ matrix.python-version }}" in
            "3.10") PYBIN="/opt/python/cp310-cp310/bin" ;;
            "3.11") PYBIN="/opt/python/cp311-cp311/bin" ;;
            "3.12") PYBIN="/opt/python/cp312-cp312/bin" ;;
            "3.13") PYBIN="/opt/python/cp313-cp313/bin" ;;
            "3.14") PYBIN="/opt/python/cp314-cp314/bin" ;;
          esac
          
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PYBIN="${PYBIN}" \
            quay.io/pypa/${{ matrix.musllinux-image }} \
            sh -c "
              \${PYBIN}/pip install dist/*.whl
              \${PYBIN}/python -c 'import screamrouter; print(\"ScreamRouter version:\", getattr(screamrouter, \"__version__\", \"unknown\"))'
            "

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-arm64-musl-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 7

  build-windows-x64:
    name: Build Windows x64 Wheels
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Strawberry Perl
        run: |
          choco install strawberryperl -y
          echo "C:\Strawberry\perl\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pybind11 PyYAML wheel setuptools
      
      - name: Set up MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      
      - name: Build wheel
        run: python setup.py bdist_wheel
      
      - name: Test wheel installation
        run: |
          pip install (Get-Item dist\*.whl).FullName
          python -c "import screamrouter; print('ScreamRouter version:', getattr(screamrouter, '__version__', 'unknown'))"
      
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-x64-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 7

  build-windows-x86:
    name: Build Windows x86 Wheels
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x86
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Strawberry Perl
        run: |
          choco install strawberryperl -y
          echo "C:\Strawberry\perl\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pybind11 PyYAML wheel setuptools
      
      - name: Set up MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
      
      - name: Build wheel
        run: python setup.py bdist_wheel
      
      - name: Test wheel installation
        run: |
          pip install (Get-Item dist\*.whl).FullName
          python -c "import screamrouter; print('ScreamRouter version:', getattr(screamrouter, '__version__', 'unknown'))"
      
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-x86-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 7

  collect-artifacts:
    name: Collect All Wheels
    runs-on: ubuntu-latest
    needs: [build-linux-x86_64, build-linux-arm64, build-linux-x86_64-musl, build-linux-arm64-musl, build-windows-x64, build-windows-x86]
    
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels
          pattern: wheels-*
      
      - name: Organize wheels
        run: |
          mkdir -p python-wheels
          find all-wheels -name '*.whl' -exec cp {} python-wheels/ \;
      
      - name: List all built packages
        run: |
          echo "Built packages:"
          ls -lh python-wheels/
          echo ""
          echo "Package inventory:"
          for pkg in python-wheels/*; do
            echo "  - $(basename $pkg)"
          done
      
      - name: Upload combined wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: python-wheels/
          retention-days: 30
      
      - name: Generate build summary
        run: |
          echo "## Package Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total wheels built: $(ls python-wheels/*.whl 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Wheels by Platform:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linux x86_64 (glibc) | $(ls python-wheels/*manylinux*x86_64.whl 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux x86_64 (musl) | $(ls python-wheels/*musllinux*x86_64.whl 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux ARM64 (glibc) | $(ls python-wheels/*manylinux*aarch64.whl 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux ARM64 (musl) | $(ls python-wheels/*musllinux*aarch64.whl 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows x64 | $(ls python-wheels/*win_amd64.whl 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows x86 | $(ls python-wheels/*win32.whl 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
